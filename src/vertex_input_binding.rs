use super::buffer::BufferHandle;

pub struct VertexAttributeDescriptor<C> {
    location: u32,
    offset: u8,
    format: AttributeFormat,
    buffer_descriptor: VertexBufferDescriptor<C>
}

pub struct VertexBufferDescriptor<C> {
    buffer: BufferHandle<C>,
    offset: u32,
    stride: u8,
    divisor: u32
}

#[allow(non_camel_case_types)]
enum AttributeFormat {
    Float_f32,
    Float_i8_fixed,
    Float_i8_norm,
    Float_i16_fixed,
    Float_i16_norm,
    Float_u8_fixed,
    Float_u8_norm,
    Float_u16_fixed,
    Float_u16_norm,
    Vector2_f32,
    Vector2_i8_fixed,
    Vector2_i8_norm,
    Vector2_i16_fixed,
    Vector2_i16_norm,
    Vector2_u8_fixed,
    Vector2_u8_norm,
    Vector2_u16_fixed,
    Vector2_u16_norm,
    Vector3_f32,
    Vector3_i8_fixed,
    Vector3_i8_norm,
    Vector3_i16_fixed,
    Vector3_i16_norm,
    Vector3_u8_fixed,
    Vector3_u8_norm,
    Vector3_u16_fixed,
    Vector3_u16_norm,
    Vector4_f32,
    Vector4_i8_fixed,
    Vector4_i8_norm,
    Vector4_i16_fixed,
    Vector4_i16_norm,
    Vector4_u8_fixed,
    Vector4_u8_norm,
    Vector4_u16_fixed,
    Vector4_u16_norm,
    Matrix2x2_f32,
    Matrix2x2_i8_fixed,
    Matrix2x2_i8_norm,
    Matrix2x2_i16_fixed,
    Matrix2x2_i16_norm,
    Matrix2x2_u8_fixed,
    Matrix2x2_u8_norm,
    Matrix2x2_u16_fixed,
    Matrix2x2_u16_norm,
    Matrix2x3_f32,
    Matrix2x3_i8_fixed,
    Matrix2x3_i8_norm,
    Matrix2x3_i16_fixed,
    Matrix2x3_i16_norm,
    Matrix2x3_u8_fixed,
    Matrix2x3_u8_norm,
    Matrix2x3_u16_fixed,
    Matrix2x3_u16_norm,
    Matrix2x4_f32,
    Matrix2x4_i8_fixed,
    Matrix2x4_i8_norm,
    Matrix2x4_i16_fixed,
    Matrix2x4_i16_norm,
    Matrix2x4_u8_fixed,
    Matrix2x4_u8_norm,
    Matrix2x4_u16_fixed,
    Matrix2x4_u16_norm,
    Matrix3x2_f32,
    Matrix3x2_i8_fixed,
    Matrix3x2_i8_norm,
    Matrix3x2_i16_fixed,
    Matrix3x2_i16_norm,
    Matrix3x2_u8_fixed,
    Matrix3x2_u8_norm,
    Matrix3x2_u16_fixed,
    Matrix3x2_u16_norm,
    Matrix3x3_f32,
    Matrix3x3_i8_fixed,
    Matrix3x3_i8_norm,
    Matrix3x3_i16_fixed,
    Matrix3x3_i16_norm,
    Matrix3x3_u8_fixed,
    Matrix3x3_u8_norm,
    Matrix3x3_u16_fixed,
    Matrix3x3_u16_norm,
    Matrix3x4_f32,
    Matrix3x4_i8_fixed,
    Matrix3x4_i8_norm,
    Matrix3x4_i16_fixed,
    Matrix3x4_i16_norm,
    Matrix3x4_u8_fixed,
    Matrix3x4_u8_norm,
    Matrix3x4_u16_fixed,
    Matrix3x4_u16_norm,
    Matrix4x2_f32,
    Matrix4x2_i8_fixed,
    Matrix4x2_i8_norm,
    Matrix4x2_i16_fixed,
    Matrix4x2_i16_norm,
    Matrix4x2_u8_fixed,
    Matrix4x2_u8_norm,
    Matrix4x2_u16_fixed,
    Matrix4x2_u16_norm,
    Matrix4x3_f32,
    Matrix4x3_i8_fixed,
    Matrix4x3_i8_norm,
    Matrix4x3_i16_fixed,
    Matrix4x3_i16_norm,
    Matrix4x3_u8_fixed,
    Matrix4x3_u8_norm,
    Matrix4x3_u16_fixed,
    Matrix4x3_u16_norm,
    Matrix4x4_f32,
    Matrix4x4_i8_fixed,
    Matrix4x4_i8_norm,
    Matrix4x4_i16_fixed,
    Matrix4x4_i16_norm,
    Matrix4x4_u8_fixed,
    Matrix4x4_u8_norm,
    Matrix4x4_u16_fixed,
    Matrix4x4_u16_norm,
    Integer_i8,
    Integer_u8,
    Integer_i16,
    Integer_u16,
    Integer_i32,
    Integer_u32,
    IVector2_i8,
    IVector2_u8,
    IVector2_i16,
    IVector2_u16,
    IVector2_i32,
    IVector2_u32,
    IVector3_i8,
    IVector3_u8,
    IVector3_i16,
    IVector3_u16,
    IVector3_i32,
    IVector3_u32,
    IVector4_i8,
    IVector4_u8,
    IVector4_i16,
    IVector4_u16,
    IVector4_i32,
    IVector4_u32,
    UnsignedInteger_u8,
    UnsignedInteger_u16,
    UnsignedInteger_u32,
    UVector2_u8,
    UVector2_u16,
    UVector2_u32,
    UVector3_u8,
    UVector3_u16,
    UVector3_u32,
    UVector4_u8,
    UVector4_u16,
    UVector4_u32,
}

impl AttributeFormat {
    fn dimensions(&self) -> (u8, u8) {
        match self {
            AttributeFormat::Float_f32 => (1, 1),
            AttributeFormat::Float_i8_fixed => (1, 1),
            AttributeFormat::Float_i8_norm => (1, 1),
            AttributeFormat::Float_i16_fixed => (1, 1),
            AttributeFormat::Float_i16_norm => (1, 1),
            AttributeFormat::Float_u8_fixed => (1, 1),
            AttributeFormat::Float_u8_norm => (1, 1),
            AttributeFormat::Float_u16_fixed => (1, 1),
            AttributeFormat::Float_u16_norm => (1, 1),
            AttributeFormat::Vector2_f32 => (1, 2),
            AttributeFormat::Vector2_i8_fixed => (1, 2),
            AttributeFormat::Vector2_i8_norm => (1, 2),
            AttributeFormat::Vector2_i16_fixed => (1, 2),
            AttributeFormat::Vector2_i16_norm => (1, 2),
            AttributeFormat::Vector2_u8_fixed => (1, 2),
            AttributeFormat::Vector2_u8_norm => (1, 2),
            AttributeFormat::Vector2_u16_fixed => (1, 2),
            AttributeFormat::Vector2_u16_norm => (1, 2),
            AttributeFormat::Vector3_f32 => (1, 3),
            AttributeFormat::Vector3_i8_fixed => (1, 3),
            AttributeFormat::Vector3_i8_norm => (1, 3),
            AttributeFormat::Vector3_i16_fixed => (1, 3),
            AttributeFormat::Vector3_i16_norm => (1, 3),
            AttributeFormat::Vector3_u8_fixed => (1, 3),
            AttributeFormat::Vector3_u8_norm => (1, 3),
            AttributeFormat::Vector3_u16_fixed => (1, 3),
            AttributeFormat::Vector3_u16_norm => (1, 3),
            AttributeFormat::Vector4_f32 => (1, 4),
            AttributeFormat::Vector4_i8_fixed => (1, 4),
            AttributeFormat::Vector4_i8_norm => (1, 4),
            AttributeFormat::Vector4_i16_fixed => (1, 4),
            AttributeFormat::Vector4_i16_norm => (1, 4),
            AttributeFormat::Vector4_u8_fixed => (1, 4),
            AttributeFormat::Vector4_u8_norm => (1, 4),
            AttributeFormat::Vector4_u16_fixed => (1, 4),
            AttributeFormat::Vector4_u16_norm => (1, 4),
            AttributeFormat::Matrix2x2_f32 => (2, 2),
            AttributeFormat::Matrix2x2_i8_fixed => (2, 2),
            AttributeFormat::Matrix2x2_i8_norm => (2, 2),
            AttributeFormat::Matrix2x2_i16_fixed => (2, 2),
            AttributeFormat::Matrix2x2_i16_norm => (2, 2),
            AttributeFormat::Matrix2x2_u8_fixed => (2, 2),
            AttributeFormat::Matrix2x2_u8_norm => (2, 2),
            AttributeFormat::Matrix2x2_u16_fixed => (2, 2),
            AttributeFormat::Matrix2x2_u16_norm => (2, 2),
            AttributeFormat::Matrix2x3_f32 => (2, 3),
            AttributeFormat::Matrix2x3_i8_fixed => (2, 3),
            AttributeFormat::Matrix2x3_i8_norm => (2, 3),
            AttributeFormat::Matrix2x3_i16_fixed => (2, 3),
            AttributeFormat::Matrix2x3_i16_norm => (2, 3),
            AttributeFormat::Matrix2x3_u8_fixed => (2, 3),
            AttributeFormat::Matrix2x3_u8_norm => (2, 3),
            AttributeFormat::Matrix2x3_u16_fixed => (2, 3),
            AttributeFormat::Matrix2x3_u16_norm => (2, 3),
            AttributeFormat::Matrix2x4_f32 => (2, 4),
            AttributeFormat::Matrix2x4_i8_fixed => (2, 4),
            AttributeFormat::Matrix2x4_i8_norm => (2, 4),
            AttributeFormat::Matrix2x4_i16_fixed => (2, 4),
            AttributeFormat::Matrix2x4_i16_norm => (2, 4),
            AttributeFormat::Matrix2x4_u8_fixed => (2, 4),
            AttributeFormat::Matrix2x4_u8_norm => (2, 4),
            AttributeFormat::Matrix2x4_u16_fixed => (2, 4),
            AttributeFormat::Matrix2x4_u16_norm => (2, 4),
            AttributeFormat::Matrix3x2_f32 => (3, 2),
            AttributeFormat::Matrix3x2_i8_fixed => (3, 2),
            AttributeFormat::Matrix3x2_i8_norm => (3, 2),
            AttributeFormat::Matrix3x2_i16_fixed => (3, 2),
            AttributeFormat::Matrix3x2_i16_norm => (3, 2),
            AttributeFormat::Matrix3x2_u8_fixed => (3, 2),
            AttributeFormat::Matrix3x2_u8_norm => (3, 2),
            AttributeFormat::Matrix3x2_u16_fixed => (3, 2),
            AttributeFormat::Matrix3x2_u16_norm => (3, 2),
            AttributeFormat::Matrix3x3_f32 => (3, 3),
            AttributeFormat::Matrix3x3_i8_fixed => (3, 3),
            AttributeFormat::Matrix3x3_i8_norm => (3, 3),
            AttributeFormat::Matrix3x3_i16_fixed => (3, 3),
            AttributeFormat::Matrix3x3_i16_norm => (3, 3),
            AttributeFormat::Matrix3x3_u8_fixed => (3, 3),
            AttributeFormat::Matrix3x3_u8_norm => (3, 3),
            AttributeFormat::Matrix3x3_u16_fixed => (3, 3),
            AttributeFormat::Matrix3x3_u16_norm => (3, 3),
            AttributeFormat::Matrix3x4_f32 => (3, 4),
            AttributeFormat::Matrix3x4_i8_fixed => (3, 4),
            AttributeFormat::Matrix3x4_i8_norm => (3, 4),
            AttributeFormat::Matrix3x4_i16_fixed => (3, 4),
            AttributeFormat::Matrix3x4_i16_norm => (3, 4),
            AttributeFormat::Matrix3x4_u8_fixed => (3, 4),
            AttributeFormat::Matrix3x4_u8_norm => (3, 4),
            AttributeFormat::Matrix3x4_u16_fixed => (3, 4),
            AttributeFormat::Matrix3x4_u16_norm => (3, 4),
            AttributeFormat::Matrix4x2_f32,
            AttributeFormat::Matrix4x2_i8_fixed,
            AttributeFormat::Matrix4x2_i8_norm,
            AttributeFormat::Matrix4x2_i16_fixed,
            AttributeFormat::Matrix4x2_i16_norm,
            AttributeFormat::Matrix4x2_u8_fixed,
            AttributeFormat::Matrix4x2_u8_norm,
            AttributeFormat::Matrix4x2_u16_fixed,
            AttributeFormat::Matrix4x2_u16_norm,
            AttributeFormat::Matrix4x3_f32,
            AttributeFormat::Matrix4x3_i8_fixed,
            AttributeFormat::Matrix4x3_i8_norm,
            AttributeFormat::Matrix4x3_i16_fixed,
            AttributeFormat::Matrix4x3_i16_norm,
            AttributeFormat::Matrix4x3_u8_fixed,
            AttributeFormat::Matrix4x3_u8_norm,
            AttributeFormat::Matrix4x3_u16_fixed,
            AttributeFormat::Matrix4x3_u16_norm,
            AttributeFormat::Matrix4x4_f32,
            AttributeFormat::Matrix4x4_i8_fixed,
            AttributeFormat::Matrix4x4_i8_norm,
            AttributeFormat::Matrix4x4_i16_fixed,
            AttributeFormat::Matrix4x4_i16_norm,
            AttributeFormat::Matrix4x4_u8_fixed,
            AttributeFormat::Matrix4x4_u8_norm,
            AttributeFormat::Matrix4x4_u16_fixed,
            AttributeFormat::Matrix4x4_u16_norm,
            AttributeFormat::Integer_i8,
            AttributeFormat::Integer_u8,
            AttributeFormat::Integer_i16,
            AttributeFormat::Integer_u16,
            AttributeFormat::Integer_i32,
            AttributeFormat::Integer_u32,
            AttributeFormat::IVector2_i8,
            AttributeFormat::IVector2_u8,
            AttributeFormat::IVector2_i16,
            AttributeFormat::IVector2_u16,
            AttributeFormat::IVector2_i32,
            AttributeFormat::IVector2_u32,
            AttributeFormat::IVector3_i8,
            AttributeFormat::IVector3_u8,
            AttributeFormat::IVector3_i16,
            AttributeFormat::IVector3_u16,
            AttributeFormat::IVector3_i32,
            AttributeFormat::IVector3_u32,
            AttributeFormat::IVector4_i8,
            AttributeFormat::IVector4_u8,
            AttributeFormat::IVector4_i16,
            AttributeFormat::IVector4_u16,
            AttributeFormat::IVector4_i32,
            AttributeFormat::IVector4_u32,
            AttributeFormat::UnsignedInteger_u8,
            AttributeFormat::UnsignedInteger_u16,
            AttributeFormat::UnsignedInteger_u32,
            AttributeFormat::UVector2_u8,
            AttributeFormat::UVector2_u16,
            AttributeFormat::UVector2_u32,
            AttributeFormat::UVector3_u8,
            AttributeFormat::UVector3_u16,
            AttributeFormat::UVector3_u32,
            AttributeFormat::UVector4_u8,
            AttributeFormat::UVector4_u16,
            AttributeFormat::UVector4_u32,
        }
    }
}

pub struct VertexInputAttributesDescriptor<C> {
    bindings: Vec<VertexAttributeDescriptor<C>>
}

impl<C> VertexInputAttributesDescriptor<C> {
    pub fn begin() -> VertexInputAttributesDescriptorBuilder<C> {
        VertexInputAttributesDescriptorBuilder {

        }
    }
}

struct VertexInputAttributesDescriptorBuilder<C> {

}

impl<C> VertexInputAttributesDescriptorBuilder<C> {
    pub fn begin_vertex_buffer(self, input: &BufferHandle<C>, offset: u32, stride: Stride) -> VertexBufferBuilder<C> {

    }

    pub fn finish(self) -> VertexInputAttributesDescriptor<C> {

    }
}

pub struct VertexBufferBuilder<C> {
    buffer: BufferHandle<C>,
    stride: Stride,
    input_bindings: Vec<VertexAttributeDescriptor<C>>
}

impl<C> VertexBufferBuilder<C> {
    pub fn attribute(&mut self, location: u32, format: AttributeFormat, divisor: )
}

#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Stride {
    Packed,
    Manual(u8)
}
